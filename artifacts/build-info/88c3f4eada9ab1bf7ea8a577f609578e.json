{
  "id": "88c3f4eada9ab1bf7ea8a577f609578e",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.7.6",
  "solcLongVersion": "0.7.6+commit.7338295f",
  "input": {
    "language": "Solidity",
    "sources": {
      "contracts/core/callback/IAlgebraFlashCallback.sol": {
        "content": "// SPDX-License-Identifier: GPL-2.0-or-later\r\npragma solidity >=0.5.0;\r\n\r\n/**\r\n *  @title Callback for IAlgebraPoolActions#flash\r\n *  @notice Any contract that calls IAlgebraPoolActions#flash must implement this interface\r\n *  @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\r\n *  https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces\r\n */\r\ninterface IAlgebraFlashCallback {\r\n  /**\r\n   *  @notice Called to `msg.sender` after transferring to the recipient from IAlgebraPool#flash.\r\n   *  @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\r\n   *  The caller of this method must be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\r\n   *  @param fee0 The fee amount in token0 due to the pool by the end of the flash\r\n   *  @param fee1 The fee amount in token1 due to the pool by the end of the flash\r\n   *  @param data Any data passed through by the caller via the IAlgebraPoolActions#flash call\r\n   */\r\n  function algebraFlashCallback(\r\n    uint256 fee0,\r\n    uint256 fee1,\r\n    bytes calldata data\r\n  ) external;\r\n}\r\n"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 0
      },
      "metadata": {
        "bytecodeHash": "none"
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers"
          ],
          "": [
            "ast"
          ]
        }
      }
    }
  },
  "output": {
    "contracts": {
      "contracts/core/callback/IAlgebraFlashCallback.sol": {
        "IAlgebraFlashCallback": {
          "abi": [
            {
              "inputs": [
                {
                  "internalType": "uint256",
                  "name": "fee0",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "fee1",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes",
                  "name": "data",
                  "type": "bytes"
                }
              ],
              "name": "algebraFlashCallback",
              "outputs": [],
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "generatedSources": [],
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "deployedBytecode": {
              "generatedSources": [],
              "immutableReferences": {},
              "linkReferences": {},
              "object": "",
              "opcodes": "",
              "sourceMap": ""
            },
            "methodIdentifiers": {
              "algebraFlashCallback(uint256,uint256,bytes)": "a60b0d3c"
            }
          }
        }
      }
    },
    "sources": {
      "contracts/core/callback/IAlgebraFlashCallback.sol": {
        "ast": {
          "absolutePath": "contracts/core/callback/IAlgebraFlashCallback.sol",
          "exportedSymbols": {
            "IAlgebraFlashCallback": [
              13
            ]
          },
          "id": 14,
          "license": "GPL-2.0-or-later",
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": [
                "solidity",
                ">=",
                "0.5",
                ".0"
              ],
              "nodeType": "PragmaDirective",
              "src": "46:24:0"
            },
            {
              "abstract": false,
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "interface",
              "documentation": {
                "id": 2,
                "nodeType": "StructuredDocumentation",
                "src": "74:288:0",
                "text": "  @title Callback for IAlgebraPoolActions#flash\n  @notice Any contract that calls IAlgebraPoolActions#flash must implement this interface\n  @dev Credit to Uniswap Labs under GPL-2.0-or-later license:\n  https://github.com/Uniswap/v3-core/tree/main/contracts/interfaces"
              },
              "fullyImplemented": false,
              "id": 13,
              "linearizedBaseContracts": [
                13
              ],
              "name": "IAlgebraFlashCallback",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "documentation": {
                    "id": 3,
                    "nodeType": "StructuredDocumentation",
                    "src": "401:598:0",
                    "text": "  @notice Called to `msg.sender` after transferring to the recipient from IAlgebraPool#flash.\n  @dev In the implementation you must repay the pool the tokens sent by flash plus the computed fee amounts.\n  The caller of this method must be checked to be a AlgebraPool deployed by the canonical AlgebraFactory.\n  @param fee0 The fee amount in token0 due to the pool by the end of the flash\n  @param fee1 The fee amount in token1 due to the pool by the end of the flash\n  @param data Any data passed through by the caller via the IAlgebraPoolActions#flash call"
                  },
                  "functionSelector": "a60b0d3c",
                  "id": 12,
                  "implemented": false,
                  "kind": "function",
                  "modifiers": [],
                  "name": "algebraFlashCallback",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 10,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 5,
                        "mutability": "mutable",
                        "name": "fee0",
                        "nodeType": "VariableDeclaration",
                        "scope": 12,
                        "src": "1039:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 4,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1039:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 7,
                        "mutability": "mutable",
                        "name": "fee1",
                        "nodeType": "VariableDeclaration",
                        "scope": 12,
                        "src": "1058:12:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "typeName": {
                          "id": 6,
                          "name": "uint256",
                          "nodeType": "ElementaryTypeName",
                          "src": "1058:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 9,
                        "mutability": "mutable",
                        "name": "data",
                        "nodeType": "VariableDeclaration",
                        "scope": 12,
                        "src": "1077:19:0",
                        "stateVariable": false,
                        "storageLocation": "calldata",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_calldata_ptr",
                          "typeString": "bytes"
                        },
                        "typeName": {
                          "id": 8,
                          "name": "bytes",
                          "nodeType": "ElementaryTypeName",
                          "src": "1077:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_storage_ptr",
                            "typeString": "bytes"
                          }
                        },
                        "visibility": "internal"
                      }
                    ],
                    "src": "1032:69:0"
                  },
                  "returnParameters": {
                    "id": 11,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "1110:0:0"
                  },
                  "scope": 13,
                  "src": "1003:108:0",
                  "stateMutability": "nonpayable",
                  "virtual": false,
                  "visibility": "external"
                }
              ],
              "scope": 14,
              "src": "364:750:0"
            }
          ],
          "src": "46:1070:0"
        },
        "id": 0
      }
    }
  }
}
